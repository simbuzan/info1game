#BlueJ class context
comment0.target=Game
comment1.params=
comment1.target=Game()
comment1.text=\n\ Create\ the\ game\ and\ initialise\ its\ internal\ map.\n
comment10.params=command
comment10.target=java.lang.String\ back(Command)
comment10.text=\n\ Command\ to\ go\ back\ uses\ the\ global\ lastRoom\ Room\ \n\ where\ the\ previous\ room\ is\ saved\ and\ than\ goes\ "back"\ to\ there\n\ @return\ String\ with\ the\ room\ description\ \n
comment11.params=command
comment11.target=java.lang.String\ goRoom(Command)
comment11.text=\ \n\ Try\ to\ go\ in\ one\ direction.\ If\ there\ is\ an\ exit,\ enter\n\ the\ new\ room,\ otherwise\ print\ an\ error\ message.\n
comment12.params=command
comment12.target=java.lang.String\ status(Command)
comment12.text=\n\ @param\ a\ Command\ object\n\ \n\ streamcode\ example\ from\ youtube\ video\ about\ javaStreams\ \n\ returns\ String\ saying\ that\ you\ have\ eaten\n
comment13.params=command
comment13.target=java.lang.String\ look(Command)
comment13.text=\n\ @param\ a\ Command\ object\n\ \n\ returns\ String\ saying\ what\ you\ see\ \n
comment14.params=command
comment14.target=java.lang.String\ pickUp(Command)
comment14.text=\n\ @param\ a\ Command\ object\n\ picks\ up\ items\ and\ adds\ them\ to\ the\ playersItems\ stack\n\ returns\ String\ for\ giving\ the\ player\ infomation\ on\ the\ game\ state\n
comment15.params=
comment15.target=void\ win()
comment16.params=time
comment16.target=void\ timeBomb(int)
comment16.text=\n\ @param\ Time\ paused\ before\ main\ event\ in\ MS\n\ \n\ sets\ the\ selfdestruction\ event\ up\ for\ alarms\ in\ the\ game\n
comment17.params=command
comment17.target=java.lang.String\ quit(Command)
comment17.text=\ \n\ "Quit"\ was\ entered.\ Check\ the\ rest\ of\ the\ command\ to\ see\n\ whether\ we\ really\ quit\ the\ game.\n\ @return\ true,\ if\ this\ command\ quits\ the\ game,\ false\ otherwise.\n
comment2.params=
comment2.target=void\ createRooms()
comment2.text=\n\ Create\ all\ the\ rooms\ and\ link\ their\ exits\ together.\n
comment3.params=
comment3.target=void\ play()
comment3.text=\n\ \ Main\ play\ routine.\ \ Loops\ until\ end\ of\ play.\n
comment4.params=commandLine
comment4.target=java.lang.String\ processCommand(java.lang.String)
comment4.text=\n\ This\ is\ a\ further\ method\ added\ by\ BK\ to\n\ provide\ a\ clearer\ interface\ that\ can\ be\ tested\:\n\ Game\ processes\ a\ commandLine\ and\ returns\ output.\n\ @param\ commandLine\ -\ the\ line\ entered\ as\ String\n\ @return\ output\ of\ the\ command\n
comment5.params=
comment5.target=void\ printWelcome()
comment5.text=\n\ Print\ out\ the\ opening\ message\ for\ the\ player.\n
comment6.params=
comment6.target=void\ printStatus()
comment7.params=command
comment7.target=java.lang.String\ processCommand(Command)
comment7.text=\n\ Given\ a\ command,\ process\ (that\ is\:\ execute)\ the\ command.\n\ @param\ command\ The\ command\ to\ be\ processed.\n\ @return\ true\ If\ the\ command\ ends\ the\ game,\ false\ otherwise.\n
comment8.params=
comment8.target=java.lang.String\ getCommandOptions()
comment8.text=\n\ gets\ all\ the\ command\ options\ \n\ @return\ String\ neatly\ cut\ up\ for\ use\ on\ the\ user\ side\n
comment9.params=
comment9.target=java.lang.String\ printHelp()
comment9.text=\n\ Print\ out\ some\ help\ information.\n\ Here\ we\ print\ some\ stupid,\ cryptic\ message\ and\ a\ list\ of\ the\ \n\ command\ words.\n
numComments=18
